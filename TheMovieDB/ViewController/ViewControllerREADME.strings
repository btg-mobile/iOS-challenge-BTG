/* 
  We are done with the components. I hope that you have understood so far what is going on.
 But, we are not done yet. This is the last step, and itâ€™s about bringing the components to action.
 As you can see in the Flow Diagram above, the ViewController will communicate with the Interactor,
 and get a response back from the Presenter. Also, when there is a need for transition, it will communicate
 with the Router.
 
 import UIKit
 
 protocol TestDisplayLogic: class
 {
     func successFetchedItems(viewModel: Test.Fetch.ViewModel)
     func errorFetchingItems(viewModel: Test.Fetch.ViewModel)
 }
 
 class TestViewController: UIViewController, TestDisplayLogic
 {
 var interactor: TestBusinessLogic?
 var router: (NSObjectProtocol & TestRoutingLogic & TestDataPassing)?
 
 // MARK: Object lifecycle
 
 override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
 {
     super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
     setup()
 }
 
 required init?(coder aDecoder: NSCoder)
 {
     super.init(coder: aDecoder)
     setup()
 }
 
 // MARK: Setup
 
 private func setup()
 {
         let viewController = self
         let interactor = TestInteractor()
         let presenter = TestPresenter()
         let router = TestRouter()
         viewController.interactor = interactor
         viewController.router = router
         interactor.presenter = presenter
         presenter.viewController = viewController
         router.viewController = viewController
         router.dataStore = interactor
     }
 
     // MARK: Routing
 
     override func prepare(for segue: UIStoryboardSegue, sender: Any?)
     {
         if let scene = segue.identifier {
             let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
                 if let router = router, router.responds(to: selector) {
                    router.perform(selector, with: segue)
                 }
         }
     }
 
     // MARK: View lifecycle
     override func viewDidLoad(){
        super.viewDidLoad()
        interactor?.fetchItems(request: Test.Fetch.Request(itemId: 23, keyword: "bbb", count: "3"))
     }
 
     func successFetchedItems(viewModel: Test.Fetch.ViewModel) {
         print(viewModel.name)
         print(viewModel.date)
     }
 
     func errorFetchingItems(viewModel: Test.Fetch.ViewModel) {
        print(viewModel.message)
     }
 }
 
 We have created two delegate methods named successFetchedItems() and errorFetchingItems().
 These methods are providing us with the proper ViewModel, so we can handle the two cases separately.
 
*/
