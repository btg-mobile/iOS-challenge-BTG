//
//  DetailViewController.swift
//  TheMovieDB
//
//  Created by Usuario on 29/01/20.
//  Copyright (c) 2020 Usuario. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: class
{
  func displayStorageResult(viewModel: DetailScene.AddMovie.ViewModel)
  func displayDeleteMovie(viewModel: DetailScene.DeleteMovie.ViewModel)
  func displayIsFavorite(viewModel: DetailScene.IsFavorite.ViewModel)
}

class DetailViewController: UIViewController, DetailDisplayLogic
{
  var interactor: DetailBusinessLogic?
  var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = DetailInteractor()
    let presenter = DetailPresenter()
    let router = DetailRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Outlets
    
  @IBOutlet weak var detailImageView: UIImageView!
  @IBOutlet weak var evaluationLabel: UILabel!
  @IBOutlet weak var titleLabel: UILabel!
  @IBOutlet weak var dateLabel: UILabel!
  @IBOutlet weak var synopsisLabel: UILabel!
  @IBOutlet weak var favoriteButton: UIButton!
  @IBOutlet weak var deleteButton: UIButton!
    
  var movie: Movie?
    
  // MARK: Actions

  @IBAction func onTouchFavoriteButton(_ sender: Any) {
    guard let currentMovie = movie else { return }
    let request = DetailScene.AddMovie.Request(movie: currentMovie)
    interactor?.AddMovieInStorage(request: request)
  }
    
  @IBAction func onTouchDeleteButton(_ sender: Any) {
    guard let currentMovie = movie, let id = currentMovie.id else { return }
    let request = DetailScene.DeleteMovie.Request(movieId: id)
    interactor?.DeleteMovie(request: request)
  }

  func displayStorageResult(viewModel: DetailScene.AddMovie.ViewModel) {
    if viewModel.result {
        let alert = UIAlertController(title: "Sucesso", message: "Filme adicionado aos favoritos", preferredStyle: UIAlertController.Style.alert)
        alert.addAction(UIAlertAction(title: "Ok", style: UIAlertAction.Style.default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    favoriteIsEnabled(isEnabled: !viewModel.result)
  }
    
  func favoriteIsEnabled(isEnabled: Bool) {
    favoriteButton.isHidden = !isEnabled
    deleteButton.isHidden = isEnabled
    favoriteButton.isEnabled = isEnabled
    deleteButton.isEnabled = !isEnabled
  }
    
  func displayIsFavorite(viewModel: DetailScene.IsFavorite.ViewModel) {
    favoriteIsEnabled(isEnabled: !viewModel.result)
  }

  func displayDeleteMovie(viewModel: DetailScene.DeleteMovie.ViewModel) {
    favoriteIsEnabled(isEnabled: viewModel.result)
  }
    
 // MARK: View lifecycle
    
  override func viewDidLoad()
  {
    super.viewDidLoad()
    if let currentMovie = router?.dataStore?.movie {
      movie = currentMovie
      if let path = currentMovie.posterPath, let url = URL(string:"\(EnviromentURL.imageURL.baseURL)\(path)") {
            detailImageView.load(url: url)
          }
        evaluationLabel.text = "\(currentMovie.voteAverage ?? 0)"
        titleLabel.text = currentMovie.title
        dateLabel.text = currentMovie.releaseDate
        synopsisLabel.text = currentMovie.overview
        
        if let id = currentMovie.id {
          let request = DetailScene.IsFavorite.Request(movieId: id)
          interactor?.isFavorite(request: request)
        }
    }
  }
}
