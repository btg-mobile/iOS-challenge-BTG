//
//  FavoritesViewController.swift
//  TheMovieDB
//
//  Created by Usuario on 28/01/20.
//  Copyright (c) 2020 Usuario. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FavoritesDisplayLogic: class
{
  func displayMovies(viewModel: FavoritesScene.GetMovies.ViewModel)
  func displaySelectedMovie(viewModel: FavoritesScene.SelectMovie.ViewModel)
}

class FavoritesViewController: UIViewController, FavoritesDisplayLogic
{
  var interactor: FavoritesBusinessLogic?
  var router: (NSObjectProtocol & FavoritesRoutingLogic & FavoritesDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = FavoritesInteractor()
    let presenter = FavoritesPresenter()
    let router = FavoritesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Outlets
  @IBOutlet weak var favoriteTableView: UITableView!
    
  var movies: [MovieDataSource] = []
  let searchController = UISearchController(searchResultsController: nil)
  var filteredMovies: [MovieDataSource] = []
    
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    registerCell()
    
    searchController.searchResultsUpdater = self
    searchController.obscuresBackgroundDuringPresentation = false
    searchController.searchBar.placeholder = "Buscar filmes"
    navigationItem.searchController = searchController
    definesPresentationContext = true
    searchController.searchBar.delegate = self
    
    navigationController?.navigationBar.barStyle = .black
    navigationItem.title = "Favoritos"
  }
    
  override func viewWillAppear(_ animated: Bool) {
    super.viewWillAppear(true)
    let request = FavoritesScene.GetMovies.Request()
    interactor?.getMovies(request: request)
  }
    
  private func registerCell() {
    let detailOffersNib = UINib(nibName: MovieTableViewCell.cellIdentifier, bundle: nil)
    favoriteTableView.register(detailOffersNib,
                               forCellReuseIdentifier: MovieTableViewCell.cellIdentifier)
    }
    
  func displayMovies(viewModel: FavoritesScene.GetMovies.ViewModel) {
    movies = viewModel.movies
    filteredMovies = viewModel.movies
    favoriteTableView.reloadData()
  }
    
  func displaySelectedMovie(viewModel: FavoritesScene.SelectMovie.ViewModel) {
    router?.navigateToDetailScene()
  }
  
  func filterContent(_ searchText: String) {
    if searchText.isEmpty {
      filteredMovies = movies
    } else {
      filteredMovies = movies.filter { (movie: MovieDataSource) -> Bool in return movie.title?.lowercased().contains(searchText.lowercased()) ?? false
      }
    }
    favoriteTableView.reloadData()
  }
}

extension FavoritesViewController: UISearchResultsUpdating {
  func updateSearchResults(for searchController: UISearchController) {
    let searchBar = searchController.searchBar
    filterContent(searchBar.text ?? "")
  }
}

extension FavoritesViewController: UISearchBarDelegate {
  func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
  }
}
