//
//  MoviesViewController.swift
//  TheMovieDB
//
//  Created by Usuario on 28/01/20.
//  Copyright (c) 2020 Usuario. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MoviesDisplayLogic: class
{
    func displayMovies(viewModel: MoviesScene.GetMovies.ViewModel)
    func displaySelectedMovie(viewModel: MoviesScene.SelectMovie.ViewModel)
}

class MoviesViewController: UIViewController, MoviesDisplayLogic
{
  var interactor: MoviesBusinessLogic?
  var router: (NSObjectProtocol & MoviesRoutingLogic & MoviesDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = MoviesInteractor()
    let presenter = MoviesPresenter()
    let router = MoviesRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Outlets
  
  @IBOutlet weak var moviesTableView: UITableView!
  @IBOutlet weak var pageLabel: UILabel!
  @IBOutlet weak var backButton: UIButton!
  @IBOutlet weak var nextButton: UIButton!
    
  var movies: [Movie] = []
  var filteredMovies: [Movie] = []
  var page: Int = 0
  var totalPages: Int = 0
  let searchController = UISearchController(searchResultsController: nil)
    
    lazy var refresh: UIRefreshControl = {
        let refreshControl = UIRefreshControl()
        refreshControl.tintColor = UIColor(named: "accent")
        refreshControl.addTarget(self, action: #selector(requestData), for: .valueChanged)
        return refreshControl
    }()
    
  // MARK: View lifecycle

  override func viewDidLoad()
  {
    super.viewDidLoad()
    
    backButton.isHidden = true
    
    registerCell()
    
    searchController.searchResultsUpdater = self
    searchController.obscuresBackgroundDuringPresentation = false
    searchController.searchBar.placeholder = "Buscar filmes"
    navigationItem.searchController = searchController
    definesPresentationContext = true
    searchController.searchBar.delegate = self
    
    moviesTableView.refreshControl = refresh
    
    navigationController?.navigationBar.barStyle = .black
    navigationItem.title = "THE MOVIE DB"
    let request = MoviesScene.GetMovies.Request(page: 1)
    interactor?.getMovies(request: request)
  }
    
  private func registerCell() {
    let detailOffersNib = UINib(nibName: MovieTableViewCell.cellIdentifier, bundle: nil)
    moviesTableView.register(detailOffersNib,
                           forCellReuseIdentifier: MovieTableViewCell.cellIdentifier)
  }
    
  func displayMovies(viewModel: MoviesScene.GetMovies.ViewModel)
  {
    page = viewModel.response.page
    totalPages = viewModel.response.totalPages
    pageLabel.text = "\(page) - \(totalPages)"
    nextButton.isHidden = page == totalPages
    backButton.isHidden = page <= 1
    
    movies = viewModel.response.movies
    filteredMovies = viewModel.response.movies
    refresh.endRefreshing()
    moviesTableView.reloadData()
  }
    
  func displaySelectedMovie(viewModel: MoviesScene.SelectMovie.ViewModel)
  {
    router?.navigateToDetailScene()
  }
    
  @IBAction func backButtonPressed(_ sender: Any) {
    if page >= 2 {
      let backPage = page - 1
      let request = MoviesScene.GetMovies.Request(page: backPage)
      interactor?.getMovies(request: request)
    }
  }
    
  @IBAction func nextButtonPressed(_ sender: Any) {
    let nextPage = page + 1
    let request = MoviesScene.GetMovies.Request(page: nextPage)
    interactor?.getMovies(request: request)
  }
    
  func filterContent(_ searchText: String) {
    if searchText.isEmpty {
      filteredMovies = movies
    } else {
      filteredMovies = movies.filter { (movie: Movie) -> Bool in return movie.title?.lowercased().contains(searchText.lowercased()) ?? false
      }
    }
    moviesTableView.reloadData()
  }

  @objc
  func requestData() {
    let request = MoviesScene.GetMovies.Request(page: page)
    interactor?.getMovies(request: request)
  }
}

extension MoviesViewController: UISearchResultsUpdating {
  func updateSearchResults(for searchController: UISearchController) {
    let searchBar = searchController.searchBar
    filterContent(searchBar.text ?? "")
  }
}

extension MoviesViewController: UISearchBarDelegate {
  func searchBar(_ searchBar: UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Int) {
  }
}
