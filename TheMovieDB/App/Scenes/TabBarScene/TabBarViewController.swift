//
//  TabBarViewController.swift
//  TheMovieDB
//
//  Created by Usuario on 28/01/20.
//  Copyright (c) 2020 Usuario. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TabBarDisplayLogic: class
{
  func displayRootViewControllers(viewModel: TabBarScene.RootViewControllers.ViewModel)
}

class TabBarViewController: UITabBarController, TabBarDisplayLogic
{
  var interactor: TabBarBusinessLogic?
  var router: (NSObjectProtocol & TabBarRoutingLogic & TabBarDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TabBarInteractor()
    let presenter = TabBarPresenter()
    let router = TabBarRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
    
  func layoutSetup()
  {
    tabBar.unselectedItemTintColor = UIColor(named: "primary")
    tabBar.tintColor = UIColor(named: "accent")
    tabBar.barTintColor = UIColor(named: "primary-dark")
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    getRootViewControllers()
    layoutSetup()
  }
    
  func getRootViewControllers()
  {
    let request = TabBarScene.RootViewControllers.Request()
    interactor?.getRootViewControllers(request: request)
  }
  
  func displayRootViewControllers(viewModel: TabBarScene.RootViewControllers.ViewModel)
  {
    let rootViewControllers = viewModel.controllers.instances()
    setViewControllers(rootViewControllers, animated: false)
  }
}

extension Array where Element == TabBarRootController
{
  func instances() -> [UIViewController] {
    return self.map { $0.instance() }
  }
}
